// The implementation here takes inspiration from <https://www.sunshine2k.de/articles/coding/crc/understanding_crc.html>

namespace Git.Taut;

/// <summary>
/// Polynomial used for the CRC: x^8 + (x^7 + x^6 + x^1 + 1), aka. poly=0xC3
/// </summary>
class Crc8
{
    const byte Poly = 0xC3;

    // csharpier-ignore
    static byte[] Table = new byte[256]
    {
        0x00, 0xC3, 0x45, 0x86, 0x8A, 0x49, 0xCF, 0x0C, 0xD7, 0x14, 0x92, 0x51, 0x5D, 0x9E, 0x18, 0xDB,
        0x6D, 0xAE, 0x28, 0xEB, 0xE7, 0x24, 0xA2, 0x61, 0xBA, 0x79, 0xFF, 0x3C, 0x30, 0xF3, 0x75, 0xB6,
        0xDA, 0x19, 0x9F, 0x5C, 0x50, 0x93, 0x15, 0xD6, 0x0D, 0xCE, 0x48, 0x8B, 0x87, 0x44, 0xC2, 0x01,
        0xB7, 0x74, 0xF2, 0x31, 0x3D, 0xFE, 0x78, 0xBB, 0x60, 0xA3, 0x25, 0xE6, 0xEA, 0x29, 0xAF, 0x6C,
        0x77, 0xB4, 0x32, 0xF1, 0xFD, 0x3E, 0xB8, 0x7B, 0xA0, 0x63, 0xE5, 0x26, 0x2A, 0xE9, 0x6F, 0xAC,
        0x1A, 0xD9, 0x5F, 0x9C, 0x90, 0x53, 0xD5, 0x16, 0xCD, 0x0E, 0x88, 0x4B, 0x47, 0x84, 0x02, 0xC1,
        0xAD, 0x6E, 0xE8, 0x2B, 0x27, 0xE4, 0x62, 0xA1, 0x7A, 0xB9, 0x3F, 0xFC, 0xF0, 0x33, 0xB5, 0x76,
        0xC0, 0x03, 0x85, 0x46, 0x4A, 0x89, 0x0F, 0xCC, 0x17, 0xD4, 0x52, 0x91, 0x9D, 0x5E, 0xD8, 0x1B,
        0xEE, 0x2D, 0xAB, 0x68, 0x64, 0xA7, 0x21, 0xE2, 0x39, 0xFA, 0x7C, 0xBF, 0xB3, 0x70, 0xF6, 0x35,
        0x83, 0x40, 0xC6, 0x05, 0x09, 0xCA, 0x4C, 0x8F, 0x54, 0x97, 0x11, 0xD2, 0xDE, 0x1D, 0x9B, 0x58,
        0x34, 0xF7, 0x71, 0xB2, 0xBE, 0x7D, 0xFB, 0x38, 0xE3, 0x20, 0xA6, 0x65, 0x69, 0xAA, 0x2C, 0xEF,
        0x59, 0x9A, 0x1C, 0xDF, 0xD3, 0x10, 0x96, 0x55, 0x8E, 0x4D, 0xCB, 0x08, 0x04, 0xC7, 0x41, 0x82,
        0x99, 0x5A, 0xDC, 0x1F, 0x13, 0xD0, 0x56, 0x95, 0x4E, 0x8D, 0x0B, 0xC8, 0xC4, 0x07, 0x81, 0x42,
        0xF4, 0x37, 0xB1, 0x72, 0x7E, 0xBD, 0x3B, 0xF8, 0x23, 0xE0, 0x66, 0xA5, 0xA9, 0x6A, 0xEC, 0x2F,
        0x43, 0x80, 0x06, 0xC5, 0xC9, 0x0A, 0x8C, 0x4F, 0x94, 0x57, 0xD1, 0x12, 0x1E, 0xDD, 0x5B, 0x98,
        0x2E, 0xED, 0x6B, 0xA8, 0xA4, 0x67, 0xE1, 0x22, 0xF9, 0x3A, 0xBC, 0x7F, 0x73, 0xB0, 0x36, 0xF5,
    };

    internal static byte Compute(ReadOnlySpan<byte> data, byte initialValue = 0)
    {
        if (data.Length == 0)
        {
            throw new ArgumentException($"Length cannot be zero", nameof(data));
        }

        var result = ComputeFromTable(data, initialValue);
        return result;
    }

    internal static byte ComputeByteWise(ReadOnlySpan<byte> data, byte initialValue = 0)
    {
        byte crc = initialValue;

        foreach (byte aByte in data)
        {
            crc ^= aByte;

            for (int i = 0; i < 8; i++)
            {
                if ((crc & 0x80) != 0)
                {
                    crc <<= 1;
                    crc ^= Poly;
                }
                else
                {
                    crc <<= 1;
                }
            }
        }

        return crc;
    }

    internal static byte ComputeFromTable(ReadOnlySpan<byte> data, byte initialValue = 0)
    {
        byte crc = initialValue;

        foreach (byte aByte in data)
        {
            byte index = (byte)(aByte ^ crc);
            crc = Table[index];
        }

        return crc;
    }

    internal static byte[] ComputeTable()
    {
        var table = new byte[256];

        for (int index = 0; index < table.Length; index++)
        {
            byte crc = (byte)index;

            for (int i = 0; i < 8; i++)
            {
                if ((crc & 0x80) != 0)
                {
                    crc <<= 1;
                    crc ^= Poly;
                }
                else
                {
                    crc <<= 1;
                }
            }

            table[index] = crc;
        }

        return table;
    }
}
